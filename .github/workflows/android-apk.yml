name: Android APK

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CI: true
      EXPO_NO_DOCTOR: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm install

      # app.json minimal (pas d'images) pour éviter Jimp/CRC en prebuild
      - name: Write minimal app.json (no images)
        run: |
          if [ -f app.json ]; then cp app.json app.json.bak || true; fi
          node -e "const fs=require('fs');const j={expo:{name:'Skilldrive',slug:'skilldrive',version:'1.0.0',android:{package:'com.skilldrive.app'}}};fs.writeFileSync('app.json',JSON.stringify(j,null,2));"
          cat app.json

      - name: Prebuild (Expo → create android/)
        run: npx expo prebuild -p android

      # Force les SDK (tous formats) + fallback app/build.gradle
      - name: Force Android SDK versions
        run: |
          GP=android/gradle.properties
          touch "$GP"
          # Formats AGP récents
          sed -i '/^android.compileSdk=/d' "$GP" || true
          sed -i '/^android.targetSdk=/d' "$GP" || true
          sed -i '/^android.minSdk=/d' "$GP" || true
          echo 'android.compileSdk=34' >> "$GP"
          echo 'android.targetSdk=34' >> "$GP"
          echo 'android.minSdk=23' >> "$GP"
          # Formats "Version" (certains plugins les lisent encore)
          sed -i '/^android.compileSdkVersion=/d' "$GP" || true
          sed -i '/^android.targetSdkVersion=/d' "$GP" || true
          sed -i '/^android.minSdkVersion=/d' "$GP" || true
          echo 'android.compileSdkVersion=34' >> "$GP"
          echo 'android.targetSdkVersion=34' >> "$GP"
          echo 'android.minSdkVersion=23' >> "$GP"
          # AndroidX/Jetifier
          grep -q '^android.useAndroidX=' "$GP" || echo 'android.useAndroidX=true' >> "$GP"
          grep -q '^android.enableJetifier=' "$GP" || echo 'android.enableJetifier=true' >> "$GP"
          echo "===== android/gradle.properties ====="
          cat "$GP"

          # Fallback dans app/build.gradle (au cas où)
          AB=android/app/build.gradle
          if grep -q 'compileSdkVersion' "$AB"; then
            sed -i 's/compileSdkVersion[[:space:]]\+[0-9]\+/compileSdkVersion 34/' "$AB"
          else
            sed -i '0,/android[[:space:]]*{/{s//android {\n    compileSdkVersion 34/}' "$AB"
          fi
          if grep -q 'minSdkVersion' "$AB"; then
            sed -i 's/minSdkVersion[[:space:]]\+[0-9]\+/minSdkVersion 23/' "$AB"
          else
            sed -i '0,/defaultConfig[[:space:]]*{/{s//defaultConfig {\n        minSdkVersion 23/}' "$AB"
          fi
          if grep -q 'targetSdkVersion' "$AB"; then
            sed -i 's/targetSdkVersion[[:space:]]\+[0-9]\+/targetSdkVersion 34/' "$AB"
          else
            sed -i '0,/defaultConfig[[:space:]]*{/{s//defaultConfig {\n        targetSdkVersion 34/}' "$AB"
          fi

      # Reset propre du plugin ExpoModulesCore (réinstalle le paquet pour restaurer le fichier d'origine)
      - name: Reset expo-modules-core to clean state
        run: |
          npm i --no-audit --no-fund --force expo-modules-core@latest expo-location@latest
          test -f node_modules/expo-modules-core/android/ExpoModulesCorePlugin.gradle && head -n 40 node_modules/expo-modules-core/android/ExpoModulesCorePlugin.gradle || echo "Plugin not found (will continue)"

      # Patch MINIMAL et SÛR : remplace UNIQUEMENT 'from components.release' si présent
      - name: Patch ExpoModulesCorePlugin.gradle (minimal)
        run: |
          FILE="node_modules/expo-modules-core/android/ExpoModulesCorePlugin.gradle"
          if [ -f "$FILE" ]; then
            # Remplace la source de publication uniquement si la chaîne existe
            if grep -q 'from[[:space:]]\+components\.release' "$FILE"; then
              perl -0777 -pe 's/from\s+components\.release/from (components.findByName("release") || components.findByName("default") || components.first())/g' -i "$FILE"
              echo "Patched 'from components.release' → source sûre"
            else
              echo "'components.release' non trouvé — aucun patch appliqué"
            fi
            # NE PAS toucher aux blocs 'publishing' → évite l'erreur 'singleVariant multiple times'
            sed -n '1,120p' "$FILE"
          else
            echo "ExpoModulesCorePlugin.gradle introuvable — on continue."
          fi

      - name: Gradle permissions
        run: chmod +x android/gradlew

      - name: Build Debug APK
        run: cd android && ./gradlew --no-daemon assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: skilldrive-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: error
