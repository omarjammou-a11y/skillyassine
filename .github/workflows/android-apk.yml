name: Android APK

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CI: true
      EXPO_NO_DOCTOR: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm install

      # 1) app.json minimal (pas d'images) pour éviter Jimp/CRC au prebuild
      - name: Write minimal app.json (no images)
        run: |
          if [ -f app.json ]; then cp app.json app.json.bak || true; fi
          node -e "const fs=require('fs');const j={expo:{name:'Skilldrive',slug:'skilldrive',version:'1.0.0',android:{package:'com.skilldrive.app'}}};fs.writeFileSync('app.json',JSON.stringify(j,null,2));"
          cat app.json

      # 2) Génère le projet Android
      - name: Prebuild (Expo → create android/)
        run: npx expo prebuild -p android

      # 3) Forcer les SDK au niveau projet + module app
      - name: Force Android SDK (project + app)
        run: |
          GP=android/gradle.properties
          touch "$GP"
          # Nouveaux formats
          sed -i '/^android.compileSdk=/d' "$GP" || true
          sed -i '/^android.targetSdk=/d' "$GP" || true
          sed -i '/^android.minSdk=/d' "$GP" || true
          echo 'android.compileSdk=34' >> "$GP"
          echo 'android.targetSdk=34' >> "$GP"
          echo 'android.minSdk=23' >> "$GP"
          # Formats hérités
          sed -i '/^android.compileSdkVersion=/d' "$GP" || true
          sed -i '/^android.targetSdkVersion=/d' "$GP" || true
          sed -i '/^android.minSdkVersion=/d' "$GP' || true
          echo 'android.compileSdkVersion=34' >> "$GP"
          echo 'android.targetSdkVersion=34' >> "$GP"
          echo 'android.minSdkVersion=23' >> "$GP"
          # AndroidX/Jetifier
          grep -q '^android.useAndroidX=' "$GP" || echo 'android.useAndroidX=true' >> "$GP"
          grep -q '^android.enableJetifier=' "$GP" || echo 'android.enableJetifier=true' >> "$GP"

          AB=android/app/build.gradle
          # compileSdkVersion
          if grep -q 'compileSdkVersion' "$AB"; then
            sed -i 's/compileSdkVersion[[:space:]]\+[0-9]\+/compileSdkVersion 34/' "$AB"
          else
            sed -i '0,/android[[:space:]]*{/{s//android {\n    compileSdkVersion 34/}' "$AB"
          fi
          # min/targetSdkVersion
          if grep -q 'minSdkVersion' "$AB"; then
            sed -i 's/minSdkVersion[[:space:]]\+[0-9]\+/minSdkVersion 23/' "$AB"
          else
            sed -i '0,/defaultConfig[[:space:]]*{/{s//defaultConfig {\n        minSdkVersion 23/}' "$AB"
          fi
          if grep -q 'targetSdkVersion' "$AB"; then
            sed -i 's/targetSdkVersion[[:space:]]\+[0-9]\+/targetSdkVersion 34/' "$AB"
          else
            sed -i '0,/defaultConfig[[:space:]]*{/{s//defaultConfig {\n        targetSdkVersion 34/}' "$AB"
          fi

      # 4) Épingler outillage stable Expo SDK 51 / RN 0.74 (Gradle/AGP/Kotlin)
      - name: Pin Gradle/AGP/Kotlin
        run: |
          WR=android/gradle/wrapper/gradle-wrapper.properties
          sed -i 's#distributionUrl=.*#distributionUrl=https\\://services.gradle.org/distributions/gradle-8.6-all.zip#' "$WR"
          RB=android/build.gradle
          if ! grep -q 'buildscript' "$RB"; then
            sed -i '1s;^;buildscript { repositories { google(); mavenCentral() } dependencies { classpath "com.android.tools.build:gradle:8.3.2" classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.22" } }\n\n;' "$RB"
          else
            sed -i 's/com\.android\.tools\.build:gradle:[0-9.]\+/com.android.tools.build:gradle:8.3.2/g' "$RB"
            sed -i 's/org\.jetbrains\.kotlin:kotlin-gradle-plugin:[0-9.]\+/org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.22/g' "$RB"
            grep -q 'com.android.tools.build:gradle:8.3.2' "$RB" || sed -i 's/buildscript[[:space:]]*{[[:space:]]*repositories[[:space:]]*{[^}]*}[[:space:]]*dependencies[[:space:]]*{[^}]*/&\n        classpath "com.android.tools.build:gradle:8.3.2"\n        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.22"/' "$RB"
          fi

      # 5) Modules Expo: forcer SDK + neutraliser publishing + sécuriser components.release
      - name: Patch all Expo modules (SDK + publishing + components.release)
        run: |
          # a) Forcer compile/min/target SDK sur tous les build.gradle des modules Android
          while IFS= read -r -d '' F; do
            # compileSdkVersion
            if grep -q 'compileSdkVersion' "$F"; then
              sed -i 's/compileSdkVersion[[:space:]]\+[0-9]\+/compileSdkVersion 34/' "$F"
            else
              sed -i '0,/android[[:space:]]*{/{s//android {\n    compileSdkVersion 34/}' "$F"
            fi
            # defaultConfig min/target
            if grep -q 'minSdkVersion' "$F"; then
              sed -i 's/minSdkVersion[[:space:]]\+[0-9]\+/minSdkVersion 23/' "$F"
            else
              sed -i '0,/defaultConfig[[:space:]]*{/{s//defaultConfig {\n        minSdkVersion 23/}' "$F"
            fi
            if grep -q 'targetSdkVersion' "$F"; then
              sed -i 's/targetSdkVersion[[:space:]]\+[0-9]\+/targetSdkVersion 34/' "$F"
            else
              sed -i '0,/defaultConfig[[:space:]]*{/{s//defaultConfig {\n        targetSdkVersion 34/}' "$F"
            fi
          done < <(find node_modules -type f -path "*/android/build.gradle" -print0)

          # b) Supprimer tout bloc 'publishing { ... }' dans ExpoModulesCorePlugin.gradle (pas utile pour build APK)
          FILE="node_modules/expo-modules-core/android/ExpoModulesCorePlugin.gradle"
          if [ -f "$FILE" ]; then
            # supprime proprement publishing { ... } (bloc entier)
            perl -0777 -pe 's/publishing\s*\{[^{}]*((\{[^{}]*\}[^{}]*)*)\}//gs' -i "$FILE"
            # sécuriser toute occurrence de 'from components.release'
            perl -0777 -pe 's/from\s+components\.release/from (components.findByName("release") || components.findByName("default") || components.first())/g' -i "$FILE"
            head -n 140 "$FILE"
          fi

      # 6) Nettoyage caches Gradle
      - name: Gradle cache cleanup
        run: |
          rm -rf ~/.gradle/caches/*/gradle-8.8*
          rm -rf ~/.gradle/caches/journal-*
          rm -rf ~/.gradle/daemon/
          echo "Caches purgés"

      - name: Gradle permissions
        run: chmod +x android/gradlew

      # 7) Build APK
      - name: Build Debug APK
        run: cd android && ./gradlew --no-daemon assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: skilldrive-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: error
